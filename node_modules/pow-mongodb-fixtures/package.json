{
  "author": {
    "name": "Charles Davison",
    "email": "charlie@powmedia.co.uk"
  },
  "name": "pow-mongodb-fixtures",
  "description": "Easy JSON fixture loading for MongoDB.  Makes managing document relationships easier.",
  "version": "0.9.0",
  "repository": {
    "type": "git",
    "url": "http://github.com/powmedia/pow-mongodb-fixtures.git"
  },
  "bin": {
    "mongofixtures": "./bin/mongofixtures"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "dependencies": {
    "async": "0.1.15",
    "mongodb": ">=0.9.9-8",
    "underscore": ">=1.2.2",
    "bson": ">=0.0.4",
    "optimist": "0.3.5"
  },
  "devDependencies": {
    "nodeunit": "0.6.4"
  },
  "main": "src/index",
  "readme": "pow-mongodb-fixtures\n=================\n\nSimple fixture loader for MongoDB on NodeJS.  Makes managing relationships between documents easier.\n\nFixtures can be in one file, or divided up into separate files for organisation \n(e.g. one file per model)\n\nThe fixture files must export objects which are keyed by the MongoDB collection name, each\ncontaining the data for documents within that.\n\nFOR EXAMPLE:\nWith the file below, 3 documents will be inserted into the 'users' collection and 2 into the 'businesses' collection:\n\n    //fixtures.js\n    exports.users = [\n        { name: 'Gob' },\n        { name: 'Buster' },\n        { name: 'Steve Holt' }\n    ];\n\n    exports.businesses = [\n        { name: 'The Banana Stand' },\n        { name: 'Bluth Homes' }\n    ];\n\n\nYou can also load fixtures as an object where each document is keyed, in case you want to reference another document. This example uses the included `createObjectId` helper:\n\n    //users.js\n    var id = require('pow-mongodb-fixtures').createObjectId;\n\n    var users = exports.users = {\n        user1: {\n            _id: id(),\n            name: 'Michael'\n        },\n        user2: {\n            _id: id(),\n            name: 'George Michael',\n            father: users.user1._id\n        },\n        user3: {\n            _id: id('4ed2b809d7446b9a0e000014'),\n            name: 'Tobias'\n        }\n    }\n\n\nCLI usage\n=========\n\nA CLI program is included for quickly loading fixture files. To use it install the module globally:\n\n    npm install pow-mongodb-fixtures -g\n\nThen use the program to install a file or directory:\n\n    mongofixtures <dbname> <fixture file>\n\n    mongofixtures appdb fixtures/users.js\n\n\nAPI\n===\n\nconnect(dbname, options)\n------------------------\n\nReturns a new Loader instance, configured to interact with a certain database.\n\nOptions:\n\n- host (Default: localhost)\n- port (Default: 27017)\n- user\n- pass\n- safe (Default: false)\n\nUsage:\n\n    var fixtures = require('pow-mongodb-fixtures').connect('dbname');\n    \n    var fixtures2 = require('pow-mongodb-fixtures').connect('dbname', {\n      host: 'http://dbhost.com/',\n      port: 1234\n    });\n\n\nload(data, callback)\n--------------------\n\nAdds documents to the relevant collection. If the collection doesn't exist it will be created first.\n\n    var fixtures = require('pow-mongodb-fixtures').connect('mydb');\n    \n    //Objects\n    fixtures.load({\n        users: [\n            { name: 'Maeby' },\n            { name: 'George Michael' }\n        ]\n    }, callback);\n\n    //Files\n    fixtures.load(__dirname + '/fixtures/users.js', cb);\n\n    //Directories (loads all files in the directory)\n    fixtures.load(__dirname + '/fixtures', callback);\n\n\nclear(callback)\n---------------\n\nClears existing data.\n\n    fixtures.clear(function(err) {\n        //Drops the database\n    });\n    \n    fixtures.clear('foo', function(err) {\n        //Clears the 'foo' collection\n    });\n    \n    fixtures.clear(['foo', 'bar'], function(err) {\n        //Clears the 'foo' and 'bar' collections\n    });\n    \n\nclearAllAndLoad(data, callback)\n----------------------------\n\nDrops the database (clear all collections) and loads data.\n\n\nclearAndLoad(data, callback)\n----------------------------\n\nClears the collections that have documents in the `data` that is passed in, and then loads data.\n\n    var data = { users: [...] };\n    \n    fixtures.clearAndLoad(data, function(err) {\n        //Clears only the 'users' collection then loads data\n    });\n    \n\naddModifier(callback)\n----------------------------\n\nAdds a modifier (function) which gets called for each document that is to be inserted. The signature of this function\nshould be:\n\n    (collectionName, document, callback)\n\n* collectionName - name of collection\n* document - the document which is to be inserted\n* callback - function with signature (err, modifiedDocument). This should be called with the modified document.\n\nModifiers are chained in the order in which they're added. For example:\n\n\n    var data = { users: [...] };\n\n    // this modifier will get called first\n    fixtures.addModifier(function(collectionName, doc, cb) {\n      doc.createdAt = new Date();\n\n      cb(null, doc);\n    });\n\n    // this modifier will get called second with the result from the first modifier call\n    fixtures.addModifier(function(collectionName, doc, cb) {\n      doc.updatedAt = new Date();\n\n      cb(null, doc);\n    });\n\n    fixtures.load(data, function(err) {\n        // each loaded data item will have the createdAt and updatedAt keys set.\n    });\n\n\nInstallation\n------------\n\n\tnpm install pow-mongodb-fixtures\n\n\nChangelog\n---------\n\n###0.8.1\n- Add mongofixtures CLI program\n\n###0.7.1\n- Add 'safe' option (donnut)\n\n###0.7.0\n- Add user and password options for connecting to authenticated/remote DBs\n\n###0.6.4\n- Add username and password connect options\n\n###0.6.3\n- Make clear be safe\n\n###0.6.2\n- Windows fixes (samitny)\n\n###0.6.1\n- Ignore subdirectories (hiddentao)\n",
  "readmeFilename": "README.md",
  "_id": "pow-mongodb-fixtures@0.9.0",
  "_from": "pow-mongodb-fixtures@"
}
